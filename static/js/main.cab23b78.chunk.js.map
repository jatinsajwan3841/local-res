{"version":3,"sources":["components/reader/index.worker.js","components/load/index.js","components/constant/index.js","components/chart/index.js","components/output/index.js","components/home/index.js","components/footer/index.js","components/localState/index.js","App.js","reportWebVitals.js","index.js"],"names":["Worker_fn","Worker","__webpack_public_path__","useStyles","makeStyles","theme","root","width","LinearIndeterminate","classes","className","LinearProgress","color","branches","value","label","excelfiles","Chart","register","registerables","LineChart","data","darkMode","chartRef","React","createRef","targetChartRef","useRef","useEffect","undefined","current","repeat","options","plugins","legend","labels","scales","x","ticks","y","grid","update","labeldata","map","i","sem","datadata","percentage","pop","total_array","Array","length","fill","datasets","getContext","type","backgroundColor","borderColor","target","borderWidth","cubicInterpolationMode","tension","display","min","beginAtZero","style","marginTop","ref","Output","name","reset","Container","maxWidth","Button","variant","startIcon","onClick","TableContainer","component","Table","size","TableHead","TableRow","TableCell","align","TableBody","row","index","scope","marks","beg","spacing","paddingTop","form","submit","margin","Home","setDarkMode","useState","res","setRes","bufferFiles","bufferLoaded","showOut","setShowOut","branch","setbranch","setname","brer","setbrer","load","setload","e","a","preventDefault","sName","toLowerCase","nfCount","resCount","loop","worker","v","postMessage","file","command","onmessage","terminate","setTimeout","prevState","tmp_total","toFixed","createTheme","palette","Promise","all","fetch","response","responses","buffer","arrayBuffer","makeBuffer","ThemeProvider","FormControlLabel","control","Switch","checked","onChange","position","right","Snackbar","anchorOrigin","vertical","horizontal","open","SnackbarContent","message","onSubmit","TextField","error","select","fullWidth","helperText","event","option","MenuItem","required","inputProps","minLength","onInput","disabled","Footer","href","useStickyState","defaultValue","key","stickyValue","window","localStorage","getItem","JSON","parse","setValue","setItem","stringify","App","height","use100vh","minHeight","num","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cab23b78.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/index.worker.46e4a5e5.worker.js\");\n}\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n}))\r\n\r\nexport default function LinearIndeterminate() {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress color=\"secondary\" />\r\n        </div>\r\n    )\r\n}\r\n","export const branches = [\r\n    {\r\n        value: 'Choose',\r\n        label: 'Choose',\r\n    },\r\n    {\r\n        value: 'C S',\r\n        label: 'CSE',\r\n    },\r\n    {\r\n        value: 'EC',\r\n        label: 'ECE',\r\n    },\r\n    {\r\n        value: 'EE',\r\n        label: 'EE',\r\n    },\r\n    {\r\n        value: 'CE',\r\n        label: 'CE',\r\n    },\r\n    {\r\n        value: 'ME',\r\n        label: 'ME',\r\n    },\r\n    {\r\n        value: 'BT',\r\n        label: 'BT',\r\n    },\r\n]\r\n\r\nexport const excelfiles = [\r\n    'dat/B. TECH. I SEM DEC 18.xlsx',\r\n    'dat/B. TECH. II SEM JUNE 2019.xlsx',\r\n    'dat/B. TECH. III SEM DECEMBER 2019.xlsx',\r\n    'dat/B. TECH. IV SEM DECEMBER 2020.xlsx',\r\n]\r\n","import React from 'react'\r\nimport { Chart, registerables } from 'chart.js'\r\nChart.register(...registerables)\r\n\r\nconst LineChart = ({ data, darkMode }) => {\r\n    const chartRef = React.createRef()\r\n    const targetChartRef = React.useRef()\r\n\r\n    React.useEffect(() => {\r\n        if (targetChartRef.current !== undefined) {\r\n            let repeat = targetChartRef.current.options\r\n            if (darkMode) {\r\n                repeat.plugins.legend.labels.color = 'rgba(255, 255, 255, 0.8)'\r\n                repeat.scales.x.ticks.color = 'rgba(255, 255, 255, 0.8)'\r\n                repeat.scales.y.ticks.color = 'rgba(255, 255, 255, 0.8)'\r\n                repeat.scales.x.grid.color = 'rgba(255, 255, 255, 0.2)'\r\n                repeat.scales.y.grid.color = 'rgba(255, 255, 255, 0.2)'\r\n                targetChartRef.current.update()\r\n            } else {\r\n                repeat.plugins.legend.labels.color = 'rgba(0, 0, 0, 0.8)'\r\n                repeat.scales.x.ticks.color = 'rgba(0, 0, 0, 0.8)'\r\n                repeat.scales.y.ticks.color = 'rgba(0, 0, 0, 0.8)'\r\n                repeat.scales.x.grid.color = 'rgba(0, 0, 0, 0.2)'\r\n                repeat.scales.y.grid.color = 'rgba(0, 0, 0, 0.2)'\r\n                targetChartRef.current.update()\r\n            }\r\n        }\r\n    }, [darkMode])\r\n\r\n    React.useEffect(() => {\r\n        if (targetChartRef.current !== undefined) {\r\n            const labeldata = data.map((i) => {\r\n                return i.sem\r\n            })\r\n            const datadata = data.map((i) => {\r\n                return i.percentage\r\n            })\r\n            labeldata.pop()\r\n            datadata.pop()\r\n            const total_array = [...Array(data.length)].fill(\r\n                data[data.length - 1].percentage,\r\n            )\r\n\r\n            targetChartRef.current.data.labels = labeldata\r\n            targetChartRef.current.data.datasets[0].data = datadata\r\n            targetChartRef.current.data.datasets[1].data = total_array\r\n            targetChartRef.current.update()\r\n        }\r\n    }, [data])\r\n\r\n    React.useEffect(() => {\r\n        const labeldata = [data[0].sem]\r\n        const datadata = [data[0].percentage]\r\n        const total_array = []\r\n\r\n        targetChartRef.current = new Chart(chartRef.current.getContext('2d'), {\r\n            type: 'line',\r\n            data: {\r\n                labels: labeldata,\r\n                datasets: [\r\n                    {\r\n                        label: '% in each sem',\r\n                        data: datadata,\r\n                        backgroundColor: ['rgba(255, 99, 132, 0.3)'],\r\n                        borderColor: [\r\n                            'rgba(255, 99, 132, 1)',\r\n                            'rgba(54, 162, 235, 1)',\r\n                            'rgba(255, 206, 86, 1)',\r\n                            'rgba(75, 192, 192, 1)',\r\n                            'rgba(153, 102, 255, 1)',\r\n                            'rgba(255, 159, 64, 1)',\r\n                        ],\r\n                        fill: {\r\n                            target: 'origin',\r\n                        },\r\n                        borderWidth: 2,\r\n                        cubicInterpolationMode: 'default',\r\n                        tension: 0.3,\r\n                    },\r\n                    {\r\n                        label: 'Total %',\r\n                        data: total_array,\r\n                        backgroundColor: ['rgba(54, 162, 235, 0.3)'],\r\n                        borderColor: ['rgba(54, 162, 235, 1)'],\r\n                        borderWidth: 2,\r\n                    },\r\n                ],\r\n            },\r\n            options: {\r\n                plugins: {\r\n                    legend: {\r\n                        display: true,\r\n                        labels: {\r\n                            color: darkMode\r\n                                ? 'rgba(255, 255, 255, 0.8)'\r\n                                : 'rgba(0, 0, 0, 0.8)',\r\n                        },\r\n                    },\r\n                },\r\n                scales: {\r\n                    x: {\r\n                        ticks: {\r\n                            color: darkMode\r\n                                ? 'rgba(255, 255, 255, 0.8)'\r\n                                : 'rgba(0, 0, 0, 0.8)',\r\n                        },\r\n                        grid: {\r\n                            color: darkMode\r\n                                ? 'rgba(255, 255, 255, 0.2)'\r\n                                : 'rgba(0, 0, 0, 0.2)',\r\n                        },\r\n                    },\r\n                    y: {\r\n                        min: 0,\r\n                        beginAtZero: true,\r\n                        ticks: {\r\n                            color: darkMode\r\n                                ? 'rgba(255, 255, 255, 0.8)'\r\n                                : 'rgba(0, 0, 0, 0.8)',\r\n                        },\r\n                        grid: {\r\n                            color: darkMode\r\n                                ? 'rgba(255, 255, 255, 0.2)'\r\n                                : 'rgba(0, 0, 0, 0.2)',\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        })\r\n    }, [])\r\n    return (\r\n        <div style={{ marginTop: '35px' }}>\r\n            <canvas ref={chartRef} />\r\n        </div>\r\n    )\r\n}\r\nexport default LineChart\r\n","import React from 'react'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Container from '@material-ui/core/Container'\r\nimport Button from '@material-ui/core/Button'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport LineChart from '../chart'\r\n\r\nconst Output = ({ name, data, reset, darkMode }) => {\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ marginTop: 6 }}\r\n                startIcon={<HomeIcon />}\r\n                onClick={reset}\r\n            >\r\n                Home\r\n            </Button>\r\n            <h2 style={{ marginTop: 6 }}> Hello {name}</h2>\r\n            <TableContainer component={Container}>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">\r\n                                <b>Sem</b>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                <b>Marks</b>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                <b>Percentage</b>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    align=\"center\"\r\n                                >\r\n                                    {row.sem}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    {row.marks}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    {row.percentage}%\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <LineChart data={data} darkMode={darkMode} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Output\r\n","import React from 'react'\r\nimport Worker from '../reader/index.worker'\r\nimport Container from '@material-ui/core/Container'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Load from '../load'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow'\r\nimport { excelfiles, branches } from '../constant'\r\nimport Output from '../output'\r\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    beg: {\r\n        marginTop: theme.spacing(8),\r\n        paddingTop: theme.spacing(2),\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3),\r\n    },\r\n}))\r\n\r\nconst Home = ({ darkMode, setDarkMode }) => {\r\n    const [res, setRes] = React.useState([])\r\n    const bufferFiles = React.useRef([])\r\n    const bufferLoaded = React.useRef(false)\r\n    const [showOut, setShowOut] = React.useState(false)\r\n\r\n    const [branch, setbranch] = React.useState('Choose')\r\n    const [name, setname] = React.useState('')\r\n    const [brer, setbrer] = React.useState(false)\r\n    const [load, setload] = React.useState(false)\r\n    const classes = useStyles()\r\n\r\n    const submit = async (e) => {\r\n        e.preventDefault()\r\n        setload(true)\r\n        await setRes([])\r\n        let sName = name.toLowerCase()\r\n        let nfCount = 0\r\n        let resCount = 0\r\n        let loop = true\r\n        while (loop) {\r\n            if (bufferLoaded.current) {\r\n                loop = false\r\n                const worker = new Worker()\r\n                bufferFiles.current.map(async (v, i) => {\r\n                    worker.postMessage({\r\n                        name: sName,\r\n                        branch: branch,\r\n                        file: v,\r\n                        command: 'run',\r\n                        sem: i + 1,\r\n                    })\r\n                })\r\n\r\n                worker.onmessage = async (e) => {\r\n                    //console.log(e.data)\r\n                    setload(false)\r\n                    if (e.data === 'nf') {\r\n                        nfCount++\r\n                        resCount++\r\n                        if (nfCount === 3) {\r\n                            await setRes('nf')\r\n                            worker.terminate()\r\n                            await setTimeout(() => setRes([]), 4000)\r\n                        }\r\n                    } else {\r\n                        await setRes((prevState) => [...prevState, e.data[0]])\r\n                        await setShowOut(true)\r\n                        resCount++\r\n                        if (resCount === excelfiles.length) {\r\n                            let tmp_total = {\r\n                                sem: 'Total :',\r\n                                marks: `${e.data[1][0]} / ${e.data[1][1]}`,\r\n                                percentage: (\r\n                                    (e.data[1][0] / e.data[1][1]) *\r\n                                    100\r\n                                ).toFixed(4),\r\n                            }\r\n                            setRes((prevState) => [...prevState, tmp_total])\r\n                            worker.terminate()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleBranch = (event) => {\r\n        setbranch(event.target.value)\r\n        if (event.target.value === 'Choose') setbrer(true)\r\n        else setbrer(false)\r\n    }\r\n\r\n    const handleNaam = (event) => {\r\n        setname(event.target.value)\r\n    }\r\n\r\n    const reset = () => {\r\n        setname('')\r\n        setbranch('Choose')\r\n        setShowOut(false)\r\n    }\r\n\r\n    const theme = createTheme({\r\n        palette: {\r\n            type: darkMode ? 'dark' : 'light',\r\n        },\r\n    })\r\n\r\n    React.useEffect(() => {\r\n        const makeBuffer = async () => {\r\n            const responses = await Promise.all(\r\n                excelfiles.map(async (v) => {\r\n                    let response = await fetch(v)\r\n                    return response\r\n                }),\r\n            )\r\n            bufferFiles.current = await Promise.all(\r\n                responses.map(async (response) => {\r\n                    let buffer = response.arrayBuffer()\r\n                    return buffer\r\n                }),\r\n            )\r\n            bufferLoaded.current = true\r\n        }\r\n        makeBuffer()\r\n    }, [])\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch\r\n                        checked={darkMode}\r\n                        onChange={() => setDarkMode(!darkMode)}\r\n                    />\r\n                }\r\n                label=\"Dark Mode\"\r\n                color=\"primary\"\r\n                style={{ position: 'absolute', right: 0 }}\r\n            />\r\n            {!showOut ? (\r\n                <>\r\n                    {load && <Load />}\r\n                    <Container maxWidth=\"sm\">\r\n                        <Snackbar\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'center',\r\n                            }}\r\n                            open={res === 'nf'}\r\n                        >\r\n                            <SnackbarContent\r\n                                style={{ backgroundColor: 'rgba(255,0,0,0.7)' }}\r\n                                message=\"The entered data didn't matched, please try again !\"\r\n                            />\r\n                        </Snackbar>\r\n                        <h2 className={classes.beg}> Hello {name}</h2>\r\n                        <p>\r\n                            This is a <s>Django</s> Web worker - Reactjs based\r\n                            project where anyone from the batch 2018-22 can have\r\n                            a quick reference of their performance in different\r\n                            semesters by a table indicating minimal necessary\r\n                            things and a graph.\r\n                        </p>\r\n                        <form className={classes.form} onSubmit={submit}>\r\n                            <TextField\r\n                                name=\"branch\"\r\n                                error={brer}\r\n                                select\r\n                                label=\"branch\"\r\n                                fullWidth\r\n                                helperText={\r\n                                    brer\r\n                                        ? 'please choose correct branch'\r\n                                        : 'please choose your branch'\r\n                                }\r\n                                value={branch}\r\n                                onChange={handleBranch}\r\n                            >\r\n                                {branches.map((option) => (\r\n                                    <MenuItem\r\n                                        key={option.value}\r\n                                        value={option.value}\r\n                                    >\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n\r\n                            {branch !== 'Choose' && (\r\n                                <TextField\r\n                                    style={{ marginTop: '10px' }}\r\n                                    type={branch === 'CE' ? 'number' : 'text'}\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"name\"\r\n                                    inputProps={\r\n                                        branch === 'CE'\r\n                                            ? { min: '180500' }\r\n                                            : { minLength: '2' }\r\n                                    }\r\n                                    label={\r\n                                        branch === 'CE' ? 'College-ID' : 'Name'\r\n                                    }\r\n                                    helperText={\r\n                                        branch === 'CE'\r\n                                            ? 'Please enter your College-ID'\r\n                                            : 'Please enter your full name'\r\n                                    }\r\n                                    onInput={handleNaam}\r\n                                />\r\n                            )}\r\n\r\n                            <center>\r\n                                <Button\r\n                                    className={classes.submit}\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled={load}\r\n                                    startIcon={<DoubleArrowIcon />}\r\n                                >\r\n                                    {load ? 'loading...' : 'Submit'}\r\n                                </Button>\r\n                            </center>\r\n                        </form>\r\n                    </Container>\r\n                </>\r\n            ) : (\r\n                <Output\r\n                    name={name}\r\n                    data={res}\r\n                    reset={reset}\r\n                    darkMode={darkMode}\r\n                />\r\n            )}\r\n        </ThemeProvider>\r\n    )\r\n}\r\nexport default Home\r\n","const Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            Tried making with care (❁´◡`❁), by : {` `}\r\n            <a className=\"nav-link\" href=\"https://github.com/jatinsajwan3841\">\r\n                jatin\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nconst useStickyState = (defaultValue, key) => {\r\n    const [value, setValue] = React.useState(() => {\r\n        const stickyValue = window.localStorage.getItem(key)\r\n        return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue\r\n    })\r\n    React.useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n    return [value, setValue]\r\n}\r\nexport default useStickyState\r\n","import React from 'react'\nimport { use100vh } from 'react-div-100vh'\nimport Home from './components/home'\nimport ParticlesBg from 'particles-bg'\nimport Footer from './components/footer'\nimport useStickyState from './components/localState'\nimport './App.css'\n\nconst App = () => {\n    const [darkMode, setDarkMode] = useStickyState(false, 'darkMode')\n    const height = use100vh()\n    return (\n        <div\n            className={`main-container ${darkMode && 'dark'}`}\n            style={{ minHeight: height }}\n        >\n            <div className=\"home\">\n                <Home darkMode={darkMode} setDarkMode={setDarkMode} />\n            </div>\n            <ParticlesBg type=\"cobweb\" num=\"30\" color=\"#a6a4ad\" />\n            <Footer />\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}