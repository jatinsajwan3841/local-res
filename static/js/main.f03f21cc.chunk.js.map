{"version":3,"sources":["serviceWorkerRegistration.js","components/reader/index.worker.js","components/load/index.js","components/constant/index.js","components/chart/index.js","components/output/index.js","components/favourite/index.js","components/localState/index.js","components/home/index.js","components/footer/index.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","Worker_fn","Worker","__webpack_public_path__","useStyles","makeStyles","theme","root","width","position","LinearIndeterminate","classes","className","LinearProgress","color","branches","value","label","excelfiles","Chart","registerables","LineChart","data","darkMode","chartRef","React","createRef","targetChartRef","useRef","useEffect","undefined","current","repeat","options","plugins","legend","labels","scales","x","ticks","y","grid","update","labeldata","map","i","sem","datadata","percentage","pop","total_array","Array","length","fill","datasets","getContext","type","backgroundColor","borderColor","target","borderWidth","cubicInterpolationMode","tension","display","min","beginAtZero","style","marginTop","ref","Output","name","load","reset","savedLoad","handleFav","favDel","Container","maxWidth","Button","variant","startIcon","onClick","size","marginLeft","disabled","TableContainer","component","Table","TableHead","TableRow","TableCell","align","TableBody","row","index","scope","marks","Favourite","saved","favShow","Chip","avatar","v","Avatar","marginBottom","onDelete","useStickyState","defaultValue","key","useState","stickyValue","localStorage","getItem","JSON","parse","setValue","setItem","stringify","beg","spacing","paddingTop","form","submit","margin","Home","setDarkMode","res","setRes","found","setFound","showOut","setShowOut","branch","setbranch","setname","brer","setbrer","setload","setSaved","setSavedLoad","bufferFiles","promiseResolve","bufferLoaded","Promise","resolve","details","e","a","preventDefault","updateLoc","sName","toLowerCase","nfCount","resCount","worker","postMessage","file","command","onmessage","terminate","setTimeout","prevState","tmp_total","toFixed","temp","splice","createTheme","palette","t1","push","resolveP","all","responses","buffer","arrayBuffer","makeBuffer","ThemeProvider","FormControlLabel","control","Switch","checked","onChange","right","Snackbar","anchorOrigin","vertical","horizontal","open","SnackbarContent","message","prev","onSubmit","TextField","select","fullWidth","helperText","event","option","MenuItem","required","inputProps","minLength","onInput","Footer","App","setUpdate","height","use100vh","serviceWorkerRegistration","minHeight","num","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f03f21cc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('update available, waiting for refresh')\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://cra.link/PWA.',\n                            )\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/index.worker.9582ec3f.worker.js\");\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport LinearProgress from '@material-ui/core/LinearProgress'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        position: 'fixed',\n    },\n}))\n\nexport default function LinearIndeterminate() {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.root}>\n            <LinearProgress color=\"secondary\" />\n        </div>\n    )\n}\n","export const branches = [\n    {\n        value: 'Choose',\n        label: 'Choose',\n    },\n    {\n        value: 'C S',\n        label: 'CSE',\n    },\n    {\n        value: 'EC',\n        label: 'ECE',\n    },\n    {\n        value: 'EE',\n        label: 'EE',\n    },\n    {\n        value: 'CE',\n        label: 'CE',\n    },\n    {\n        value: 'ME',\n        label: 'ME',\n    },\n    {\n        value: 'BT',\n        label: 'BT',\n    },\n]\n\nexport const excelfiles = [\n    'dat/B. TECH. I SEM DEC 18.xlsx',\n    'dat/B. TECH. II SEM JUNE 2019.xlsx',\n    'dat/B. TECH. III SEM DECEMBER 2019.xlsx',\n    'dat/B. TECH. IV SEM DECEMBER 2020.xlsx',\n    'dat/B. TECH. V SEM (Except ME) DECEMBER 2020 .xlsx',\n    'dat/B. TECH. VI SEM JUNE 2021 (COVID 19 ).xlsx',\n]\n","import React from 'react'\nimport { Chart, registerables } from 'chart.js'\nChart.register(...registerables)\n\nconst LineChart = ({ data, darkMode }) => {\n    const chartRef = React.createRef()\n    const targetChartRef = React.useRef()\n\n    React.useEffect(() => {\n        if (targetChartRef.current !== undefined) {\n            let repeat = targetChartRef.current.options\n            if (darkMode) {\n                repeat.plugins.legend.labels.color = 'rgba(255, 255, 255, 0.8)'\n                repeat.scales.x.ticks.color = 'rgba(255, 255, 255, 0.8)'\n                repeat.scales.y.ticks.color = 'rgba(255, 255, 255, 0.8)'\n                repeat.scales.x.grid.color = 'rgba(255, 255, 255, 0.2)'\n                repeat.scales.y.grid.color = 'rgba(255, 255, 255, 0.2)'\n                targetChartRef.current.update()\n            } else {\n                repeat.plugins.legend.labels.color = 'rgba(0, 0, 0, 0.8)'\n                repeat.scales.x.ticks.color = 'rgba(0, 0, 0, 0.8)'\n                repeat.scales.y.ticks.color = 'rgba(0, 0, 0, 0.8)'\n                repeat.scales.x.grid.color = 'rgba(0, 0, 0, 0.2)'\n                repeat.scales.y.grid.color = 'rgba(0, 0, 0, 0.2)'\n                targetChartRef.current.update()\n            }\n        }\n    }, [darkMode])\n\n    React.useEffect(() => {\n        if (targetChartRef.current !== undefined) {\n            const labeldata = data.map((i) => {\n                return i.sem\n            })\n            const datadata = data.map((i) => {\n                return i.percentage\n            })\n            labeldata.pop()\n            datadata.pop()\n            const total_array = [...Array(data.length)].fill(\n                data[data.length - 1].percentage,\n            )\n\n            targetChartRef.current.data.labels = labeldata\n            targetChartRef.current.data.datasets[0].data = datadata\n            targetChartRef.current.data.datasets[1].data = total_array\n            targetChartRef.current.update()\n        }\n    }, [data])\n\n    React.useEffect(() => {\n        const labeldata = data.map((i) => {\n            return i.sem\n        })\n        const datadata = data.map((i) => {\n            return i.percentage\n        })\n        labeldata.pop()\n        datadata.pop()\n        const total_array = [...Array(data.length)].fill(\n            data[data.length - 1].percentage,\n        )\n\n        targetChartRef.current = new Chart(chartRef.current.getContext('2d'), {\n            type: 'line',\n            data: {\n                labels: labeldata,\n                datasets: [\n                    {\n                        label: '% in each sem',\n                        data: datadata,\n                        backgroundColor: ['rgba(255, 99, 132, 0.3)'],\n                        borderColor: [\n                            'rgba(255, 99, 132, 1)',\n                            'rgba(54, 162, 235, 1)',\n                            'rgba(255, 206, 86, 1)',\n                            'rgba(75, 192, 192, 1)',\n                            'rgba(153, 102, 255, 1)',\n                            'rgba(255, 159, 64, 1)',\n                        ],\n                        fill: {\n                            target: 'origin',\n                        },\n                        borderWidth: 2,\n                        cubicInterpolationMode: 'default',\n                        tension: 0.3,\n                    },\n                    {\n                        label: 'Total %',\n                        data: total_array,\n                        backgroundColor: ['rgba(54, 162, 235, 0.3)'],\n                        borderColor: ['rgba(54, 162, 235, 1)'],\n                        borderWidth: 2,\n                    },\n                ],\n            },\n            options: {\n                plugins: {\n                    legend: {\n                        display: true,\n                        labels: {\n                            color: darkMode\n                                ? 'rgba(255, 255, 255, 0.8)'\n                                : 'rgba(0, 0, 0, 0.8)',\n                        },\n                    },\n                },\n                scales: {\n                    x: {\n                        ticks: {\n                            color: darkMode\n                                ? 'rgba(255, 255, 255, 0.8)'\n                                : 'rgba(0, 0, 0, 0.8)',\n                        },\n                        grid: {\n                            color: darkMode\n                                ? 'rgba(255, 255, 255, 0.2)'\n                                : 'rgba(0, 0, 0, 0.2)',\n                        },\n                    },\n                    y: {\n                        min: 0,\n                        beginAtZero: true,\n                        ticks: {\n                            color: darkMode\n                                ? 'rgba(255, 255, 255, 0.8)'\n                                : 'rgba(0, 0, 0, 0.8)',\n                        },\n                        grid: {\n                            color: darkMode\n                                ? 'rgba(255, 255, 255, 0.2)'\n                                : 'rgba(0, 0, 0, 0.2)',\n                        },\n                    },\n                },\n            },\n        })\n    }, [])\n    return (\n        <div style={{ marginTop: '35px' }}>\n            <canvas ref={chartRef} />\n        </div>\n    )\n}\nexport default LineChart\n","import React from 'react'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Container from '@material-ui/core/Container'\nimport Button from '@material-ui/core/Button'\nimport HomeIcon from '@material-ui/icons/Home'\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder'\nimport BackspaceIcon from '@material-ui/icons/Backspace'\nimport LineChart from '../chart'\n\nconst Output = ({\n    name,\n    data,\n    load,\n    reset,\n    darkMode,\n    savedLoad,\n    handleFav,\n    favDel,\n}) => {\n    return (\n        <Container maxWidth=\"md\">\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ marginTop: 6 }}\n                startIcon={<HomeIcon />}\n                onClick={reset}\n                size=\"small\"\n            >\n                Home\n            </Button>\n            {savedLoad === 'No' ? (\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginTop: 6, marginLeft: 6 }}\n                    startIcon={<BookmarkBorderIcon />}\n                    onClick={handleFav}\n                    disabled={load}\n                    size=\"small\"\n                >\n                    Save\n                </Button>\n            ) : (\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginTop: 6, marginLeft: 6 }}\n                    startIcon={<BackspaceIcon />}\n                    onClick={() => favDel(savedLoad)}\n                    disabled={load}\n                    size=\"small\"\n                >\n                    Del\n                </Button>\n            )}\n            <h2 style={{ marginTop: 6 }}> Hello {name}</h2>\n            <TableContainer component={Container}>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"center\">\n                                <b>Sem</b>\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                <b>Marks</b>\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                <b>Percentage</b>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {data.map((row, index) => (\n                            <TableRow key={index}>\n                                <TableCell\n                                    component=\"th\"\n                                    scope=\"row\"\n                                    align=\"center\"\n                                >\n                                    {row.sem}\n                                </TableCell>\n                                <TableCell align=\"center\">\n                                    {row.marks}\n                                </TableCell>\n                                <TableCell align=\"center\">\n                                    {row.percentage}%\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <LineChart data={data} darkMode={darkMode} />\n        </Container>\n    )\n}\n\nexport default Output\n","import React from 'react'\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder'\nimport Avatar from '@material-ui/core/Avatar'\nimport Chip from '@material-ui/core/Chip'\n\nconst Favourite = ({ saved, favShow, favDel }) => {\n    return (\n        <div>\n            <Chip avatar={<BookmarkBorderIcon />} label={'Saved :'} />\n            <ul>\n                {saved.length == 0\n                    ? 'None, try saving for faster visits! ╰(*°▽°*)╯'\n                    : saved.map((v, i) => (\n                          <li key={i}>\n                              <Chip\n                                  avatar={<Avatar>{v.name[0]}</Avatar>}\n                                  label={v.name}\n                                  variant=\"outlined\"\n                                  style={{ marginBottom: 8 }}\n                                  onClick={() => favShow(i)}\n                                  onDelete={() => favDel(i)}\n                              />\n                          </li>\n                      ))}\n            </ul>\n        </div>\n    )\n}\nexport default Favourite\n","import React from 'react'\nconst useStickyState = (defaultValue, key) => {\n    const [value, setValue] = React.useState(() => {\n        const stickyValue = window.localStorage.getItem(key)\n        return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue\n    })\n    React.useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify(value))\n    }, [key, value])\n    return [value, setValue]\n}\nexport default useStickyState\n","import React from 'react'\nimport Worker from '../reader/index.worker'\nimport Container from '@material-ui/core/Container'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Load from '../load'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow'\nimport { excelfiles, branches } from '../constant'\nimport Output from '../output'\nimport Favourite from '../favourite'\nimport useStickyState from '../localState'\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n    beg: {\n        marginTop: theme.spacing(8),\n        paddingTop: theme.spacing(2),\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3),\n    },\n}))\n\nconst Home = ({ darkMode, setDarkMode, update }) => {\n    const [res, setRes] = React.useState([])\n    const [found, setFound] = React.useState(true)\n    const [showOut, setShowOut] = React.useState(false)\n    const [branch, setbranch] = React.useState('Choose')\n    const [name, setname] = React.useState('')\n    const [brer, setbrer] = React.useState(false)\n    const [load, setload] = React.useState(false)\n    const [saved, setSaved] = useStickyState([], 'favourite')\n    const [savedLoad, setSavedLoad] = React.useState('No')\n\n    const bufferFiles = React.useRef([])\n    const promiseResolve = React.useRef(null)\n    const bufferLoaded = React.useRef(\n        new Promise((resolve) => (promiseResolve.current = resolve)),\n    )\n    const details = React.useRef(['', 'Choose'])\n\n    const classes = useStyles()\n\n    const submit = async (e) => {\n        try {\n            e.preventDefault()\n            setSavedLoad('No')\n        } catch {\n            var updateLoc = e\n            setSavedLoad(updateLoc)\n        } finally {\n            if (details.current[1] === 'Choose') return\n            setload(true)\n            setRes([])\n            setFound(true)\n            let sName = details.current[0].toLowerCase()\n            let nfCount = 0\n            let resCount = 0\n            await bufferLoaded.current\n            const worker = new Worker()\n            bufferFiles.current.map(async (v, i) => {\n                worker.postMessage({\n                    name: sName,\n                    branch: details.current[1],\n                    file: v,\n                    command: 'run',\n                    sem: i + 1,\n                })\n            })\n\n            worker.onmessage = async (e) => {\n                if (e.data === 'nf') {\n                    nfCount++\n                    resCount++\n                    if (nfCount === 3) {\n                        setload(false)\n                        await setFound(false)\n                        worker.terminate()\n                        setTimeout(() => {\n                            setFound(true)\n                        }, 4000)\n                    }\n                } else {\n                    await setRes((prevState) => [...prevState, e.data[0]])\n                    await setShowOut(true)\n                    resCount++\n                    if (branch === 'ME' && resCount === excelfiles.length - 1) {\n                        let tmp_total = {\n                            sem: 'Total :',\n                            marks: `${e.data[1][0]} / ${e.data[1][1]}`,\n                            percentage: (\n                                (e.data[1][0] / e.data[1][1]) *\n                                100\n                            ).toFixed(4),\n                        }\n                        setload(false)\n                        setRes((prevState) => {\n                            try {\n                                let temp = [...saved]\n                                temp[updateLoc].data = [...prevState, tmp_total]\n                                setSaved(temp)\n                            } catch {}\n\n                            return [...prevState, tmp_total]\n                        })\n                        worker.terminate()\n                    } else if (resCount === excelfiles.length) {\n                        let tmp_total = {\n                            sem: 'Total :',\n                            marks: `${e.data[1][0]} / ${e.data[1][1]}`,\n                            percentage: (\n                                (e.data[1][0] / e.data[1][1]) *\n                                100\n                            ).toFixed(4),\n                        }\n                        setload(false)\n                        setRes((prevState) => {\n                            try {\n                                let temp = [...saved]\n                                temp[updateLoc].data = [...prevState, tmp_total]\n                                setSaved(temp)\n                            } catch {}\n\n                            return [...prevState, tmp_total]\n                        })\n                        worker.terminate()\n                    }\n                }\n            }\n        }\n    }\n\n    const handleBranch = (event) => {\n        setbranch(event.target.value)\n        details.current[1] = event.target.value\n        if (event.target.value === 'Choose') setbrer(true)\n        else setbrer(false)\n    }\n\n    const handleNaam = (event) => {\n        setname(event.target.value)\n        details.current[0] = event.target.value\n    }\n\n    const reset = () => {\n        setname('')\n        setbranch('Choose')\n        setShowOut(false)\n        details.current = ['', 'Choose']\n    }\n\n    const handleFav = () => {\n        let temp = {\n            name: details.current[0],\n            branch: details.current[1],\n            data: res,\n        }\n        setSaved((prev) => [...prev, temp])\n        setSavedLoad(saved.length)\n    }\n\n    const favDel = (i) => {\n        let temp = [...saved]\n        temp.splice(i, 1)\n        setSaved(temp)\n        setSavedLoad('No')\n    }\n\n    const favShow = async (i) => {\n        if (saved[i].data === 'update') {\n            details.current = [saved[i].name, saved[i].branch]\n            submit(i)\n        } else {\n            setSavedLoad(i)\n            setRes(saved[i].data)\n            details.current = [saved[i].name, saved[i].branch]\n            setname(saved[i].name)\n            setShowOut(true)\n        }\n    }\n\n    const theme = createTheme({\n        palette: {\n            type: darkMode ? 'dark' : 'light',\n        },\n    })\n\n    React.useEffect(() => {\n        if (update === 'update' && saved.length !== 0) {\n            let temp = []\n            saved.map((v) => {\n                let t1 = {\n                    ...v,\n                    data: 'update',\n                }\n                temp.push(t1)\n            })\n            setSaved(temp)\n        }\n    }, [update])\n\n    React.useEffect(() => {\n        const makeBuffer = async (resolveP) => {\n            const responses = await Promise.all(\n                excelfiles.map(async (v) => {\n                    let response = await fetch(v)\n                    return response\n                }),\n            )\n            bufferFiles.current = await Promise.all(\n                responses.map(async (response) => {\n                    let buffer = response.arrayBuffer()\n                    return buffer\n                }),\n            )\n            resolveP()\n        }\n        makeBuffer(promiseResolve.current)\n    }, [])\n\n    return (\n        <ThemeProvider theme={theme}>\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={darkMode}\n                        onChange={() => setDarkMode(!darkMode)}\n                    />\n                }\n                label=\"Dark Mode\"\n                color=\"primary\"\n                style={{ position: 'absolute', right: 0 }}\n            />\n            {update === 'fInstall' && (\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                    open={true}\n                >\n                    <SnackbarContent message=\"Now available for offline usage, can install/add to home screen from browser drawer.\" />\n                </Snackbar>\n            )}\n            {update === 'update' && (\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'top',\n                        horizontal: 'center',\n                    }}\n                    open={true}\n                >\n                    <SnackbarContent message=\"Update available, refresh page for updated content, can install/add to home screen from browser drawer.\" />\n                </Snackbar>\n            )}\n            {load && <Load />}\n            {!showOut ? (\n                <>\n                    <Container maxWidth=\"sm\">\n                        <Snackbar\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'center',\n                            }}\n                            open={!found}\n                        >\n                            <SnackbarContent message=\"The entered data didn't matched, please try again !\" />\n                        </Snackbar>\n                        <h2 className={classes.beg}> Hello {name}</h2>\n                        <p>\n                            This is a Web worker - Reactjs based PWA where\n                            anyone from the batch 2018-22 can have a quick\n                            reference of their academic performance.\n                            <br />\n                            It will work offline too and is installable.\n                        </p>\n                        <form className={classes.form} onSubmit={submit}>\n                            <TextField\n                                name=\"branch\"\n                                error={brer}\n                                select\n                                label=\"branch\"\n                                fullWidth\n                                helperText={\n                                    brer\n                                        ? 'please choose correct branch'\n                                        : 'please choose your branch'\n                                }\n                                value={branch}\n                                onChange={handleBranch}\n                            >\n                                {branches.map((option) => (\n                                    <MenuItem\n                                        key={option.value}\n                                        value={option.value}\n                                    >\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n\n                            {branch !== 'Choose' && (\n                                <TextField\n                                    style={{ marginTop: '10px' }}\n                                    type={branch === 'CE' ? 'number' : 'text'}\n                                    required\n                                    fullWidth\n                                    name=\"name\"\n                                    inputProps={\n                                        branch === 'CE'\n                                            ? { min: '180500' }\n                                            : { minLength: '2' }\n                                    }\n                                    label={\n                                        branch === 'CE' ? 'College-ID' : 'Name'\n                                    }\n                                    helperText={\n                                        branch === 'CE'\n                                            ? 'Please enter your College-ID'\n                                            : 'Please enter your full name'\n                                    }\n                                    onInput={handleNaam}\n                                />\n                            )}\n\n                            <center>\n                                <Button\n                                    className={classes.submit}\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled={load}\n                                    startIcon={<DoubleArrowIcon />}\n                                >\n                                    {load ? 'loading...' : 'Submit'}\n                                </Button>\n                            </center>\n                        </form>\n                        <Favourite\n                            saved={saved}\n                            favShow={favShow}\n                            favDel={favDel}\n                        />\n                    </Container>\n                </>\n            ) : (\n                <Output\n                    name={details.current[0]}\n                    data={res}\n                    load={load}\n                    reset={reset}\n                    darkMode={darkMode}\n                    savedLoad={savedLoad}\n                    handleFav={handleFav}\n                    favDel={favDel}\n                />\n            )}\n        </ThemeProvider>\n    )\n}\nexport default Home\n","const Footer = () => {\n    return (\n        <div className=\"footer\">\n            Tried making with care (❁´◡`❁), by : {` `}\n            <a className=\"nav-link\" href=\"https://github.com/jatinsajwan3841\">\n                jatin\n            </a>\n        </div>\n    )\n}\n\nexport default Footer\n","import React from 'react'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport { use100vh } from 'react-div-100vh'\nimport Home from './components/home'\nimport ParticlesBg from 'particles-bg'\nimport Footer from './components/footer'\nimport useStickyState from './components/localState'\nimport './App.css'\n\nconst App = () => {\n    const [darkMode, setDarkMode] = useStickyState(false, 'darkMode')\n    const [update, setUpdate] = React.useState('')\n    const height = use100vh()\n\n    React.useEffect(() => {\n        serviceWorkerRegistration.register({\n            onSuccess: async () => {\n                await setUpdate('fInstall')\n                await setTimeout(() => setUpdate(''), 4000)\n            },\n            onUpdate: async () => {\n                await setUpdate('update')\n                await setTimeout(() => setUpdate(''), 4000)\n            },\n        })\n    }, [])\n    return (\n        <div\n            className={`main-container ${darkMode && 'dark'}`}\n            style={{ minHeight: height }}\n        >\n            <div className=\"home\">\n                <Home\n                    darkMode={darkMode}\n                    setDarkMode={setDarkMode}\n                    update={update}\n                />\n            </div>\n            <ParticlesBg type=\"cobweb\" num=\"30\" color=\"#a6a4ad\" />\n            <Footer />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}