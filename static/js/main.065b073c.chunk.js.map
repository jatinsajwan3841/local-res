{"version":3,"sources":["components/reader/index.worker.js","components/load/index.js","components/constant/index.js","components/chart/index.js","components/output/index.js","components/home/index.js","App.js","reportWebVitals.js","index.js"],"names":["Worker_fn","Worker","__webpack_public_path__","useStyles","makeStyles","theme","root","width","marginTop","spacing","LinearIndeterminate","classes","className","LinearProgress","color","branches","value","label","excelfiles","Chart","register","registerables","LineChart","data","chartRef","React","createRef","targetChartRef","useRef","useEffect","labeldata","map","i","sem","datadata","percentage","undefined","current","destroy","getContext","type","labels","datasets","backgroundColor","fill","target","borderColor","borderWidth","options","scales","y","max","min","beginAtZero","style","ref","Output","name","setShowOut","Container","maxWidth","Button","variant","startIcon","onClick","TableContainer","component","Table","size","TableHead","TableRow","TableCell","align","TableBody","row","index","scope","marks","beg","form","submit","margin","Home","useState","res","setRes","bufferFiles","showOut","branch","setbranch","setname","brer","setbrer","load","setload","e","a","preventDefault","sName","toLowerCase","nfCount","resCount","worker","v","postMessage","file","command","onmessage","terminate","prevState","length","fetch","response","arrayBuffer","buffer","Snackbar","anchorOrigin","vertical","horizontal","open","SnackbarContent","message","onSubmit","TextField","id","error","select","fullWidth","helperText","onChange","event","option","MenuItem","required","onInput","disabled","App","num","bg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.065b073c.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/index.worker.deaa4633.worker.js\");\n}\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}))\r\n\r\nexport default function LinearIndeterminate() {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress color=\"secondary\" />\r\n        </div>\r\n    )\r\n}\r\n","export const branches = [\r\n    {\r\n        value: 'Choose',\r\n        label: 'Choose',\r\n    },\r\n    {\r\n        value: 'C S',\r\n        label: 'CSE',\r\n    },\r\n    {\r\n        value: 'EC',\r\n        label: 'ECE',\r\n    },\r\n    {\r\n        value: 'EE',\r\n        label: 'EE',\r\n    },\r\n    {\r\n        value: 'CE',\r\n        label: 'CE',\r\n    },\r\n    {\r\n        value: 'ME',\r\n        label: 'ME',\r\n    },\r\n    {\r\n        value: 'BT',\r\n        label: 'BT',\r\n    },\r\n]\r\n\r\nexport const excelfiles = [\r\n    'dat/B. TECH. I SEM DEC 18.xlsx',\r\n    'dat/B. TECH. II SEM JUNE 2019.xlsx',\r\n    'dat/B. TECH. III SEM DECEMBER 2019.xlsx',\r\n    'dat/B. TECH. IV SEM DECEMBER 2020.xlsx',\r\n]\r\n","import React from 'react'\r\nimport { Chart, registerables } from 'chart.js'\r\nChart.register(...registerables)\r\n\r\nconst LineChart = ({ data }) => {\r\n    const chartRef = React.createRef()\r\n    const targetChartRef = React.useRef()\r\n\r\n    React.useEffect(() => {\r\n        const labeldata = data.map((i) => {\r\n            return i.sem\r\n        })\r\n        const datadata = data.map((i) => {\r\n            return i.percentage\r\n        })\r\n        //labeldata.pop()\r\n        //datadata.pop()\r\n\r\n        targetChartRef.current !== undefined && targetChartRef.current.destroy()\r\n\r\n        targetChartRef.current = new Chart(chartRef.current.getContext('2d'), {\r\n            type: 'line',\r\n            data: {\r\n                labels: labeldata,\r\n                datasets: [\r\n                    {\r\n                        label: 'Percentage in each sem',\r\n                        data: datadata,\r\n                        backgroundColor: ['rgba(255, 99, 132, 0.2)'],\r\n                        fill: {\r\n                            target: 'origin',\r\n                        },\r\n                        borderColor: [\r\n                            'rgba(255, 99, 132, 1)',\r\n                            'rgba(54, 162, 235, 1)',\r\n                            'rgba(255, 206, 86, 1)',\r\n                            'rgba(75, 192, 192, 1)',\r\n                            'rgba(153, 102, 255, 1)',\r\n                            'rgba(255, 159, 64, 1)',\r\n                        ],\r\n                        borderWidth: 1,\r\n                    },\r\n                ],\r\n            },\r\n            options: {\r\n                scales: {\r\n                    y: {\r\n                        max: 100,\r\n                        min: 0,\r\n                        beginAtZero: true,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n    }, [data])\r\n    return (\r\n        <div style={{ marginTop: '25px' }}>\r\n            <canvas ref={chartRef} />\r\n        </div>\r\n    )\r\n}\r\nexport default LineChart\r\n","import React from 'react'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Container from '@material-ui/core/Container'\r\nimport Button from '@material-ui/core/Button'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport LineChart from '../chart'\r\n\r\nconst Output = ({ name, data, setShowOut }) => {\r\n    return (\r\n        <Container maxWidth=\"md\">\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<HomeIcon />}\r\n                onClick={() => setShowOut(false)}\r\n            >\r\n                Home\r\n            </Button>\r\n            <h2 style={{ marginTop: 6 }}> Hello {name}</h2>\r\n            <TableContainer component={Container}>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">\r\n                                <b>Sem</b>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                <b>Marks</b>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                <b>Percentage</b>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    align=\"center\"\r\n                                >\r\n                                    {row.sem}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    {row.marks}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    {row.percentage}%\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <LineChart data={data} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Output\r\n","import React from 'react'\r\nimport Worker from '../reader/index.worker'\r\nimport Container from '@material-ui/core/Container'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Load from '../load'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow'\r\nimport { excelfiles, branches } from '../constant'\r\nimport Output from '../output'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    beg: {\r\n        marginTop: theme.spacing(10),\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3),\r\n    },\r\n}))\r\n\r\nconst Home = () => {\r\n    const [res, setRes] = React.useState([])\r\n    const bufferFiles = React.useRef([])\r\n    const [showOut, setShowOut] = React.useState(false)\r\n\r\n    const [branch, setbranch] = React.useState('Choose')\r\n    const [name, setname] = React.useState('')\r\n    const [brer, setbrer] = React.useState(false)\r\n    const [load, setload] = React.useState(false)\r\n    const classes = useStyles()\r\n\r\n    const submit = async (e) => {\r\n        e.preventDefault()\r\n        setload(true)\r\n        await setRes([])\r\n        let sName = name.toLowerCase()\r\n        let nfCount = 0\r\n        let resCount = 0\r\n        const worker = new Worker()\r\n        bufferFiles.current.map(async (v, i) => {\r\n            worker.postMessage({\r\n                name: sName,\r\n                branch: branch,\r\n                file: v,\r\n                command: 'run',\r\n                sem: i + 1,\r\n            })\r\n        })\r\n\r\n        worker.onmessage = async (e) => {\r\n            //console.log(e.data)\r\n            setload(false)\r\n            if (e.data === 'nf') {\r\n                nfCount++\r\n                if (nfCount === 3) {\r\n                    await setRes('nf')\r\n                    worker.terminate()\r\n                }\r\n            } else {\r\n                await setRes((prevState) => [...prevState, e.data])\r\n                await setShowOut(true)\r\n                resCount++\r\n                if (resCount === excelfiles.length) {\r\n                    worker.terminate()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleBranch = (event) => {\r\n        setbranch(event.target.value)\r\n        if (event.target.value === 'Choose') setbrer(true)\r\n        else setbrer(false)\r\n    }\r\n\r\n    const handleNaam = (event) => {\r\n        setname(event.target.value)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        excelfiles.map(async (v, i) => {\r\n            let response = await fetch(v)\r\n            let buffer = await response.arrayBuffer()\r\n            bufferFiles.current = [...bufferFiles.current, buffer]\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {!showOut ? (\r\n                <>\r\n                    {load && <Load />}\r\n                    <Container maxWidth=\"sm\">\r\n                        <Snackbar\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'center',\r\n                            }}\r\n                            open={res === 'nf' ? true : false}\r\n                        >\r\n                            <SnackbarContent\r\n                                style={{ backgroundColor: 'rgba(255,0,0,0.7)' }}\r\n                                message=\"The entered data didn't matched, please try again !\"\r\n                            />\r\n                        </Snackbar>\r\n                        <h2 className={classes.beg}> Hello {name}</h2>\r\n                        <p>\r\n                            This is a Django - Reactjs based project where\r\n                            anyone from the batch 2018-22 can have a quick\r\n                            reference of their performance in different\r\n                            semesters by a table indicating minimal necessary\r\n                            things and a graph.\r\n                        </p>\r\n                        <form className={classes.form} onSubmit={submit}>\r\n                            <TextField\r\n                                name=\"branch\"\r\n                                id=\"branch\"\r\n                                error={brer}\r\n                                select\r\n                                label=\"branch\"\r\n                                fullWidth\r\n                                helperText={\r\n                                    brer\r\n                                        ? 'please choose correct branch'\r\n                                        : 'please choose your branch'\r\n                                }\r\n                                value={branch}\r\n                                onChange={handleBranch}\r\n                            >\r\n                                {branches.map((option) => (\r\n                                    <MenuItem\r\n                                        key={option.value}\r\n                                        value={option.value}\r\n                                    >\r\n                                        {option.label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n\r\n                            {branch !== 'Choose' && (\r\n                                <TextField\r\n                                    style={{ marginTop: '10px' }}\r\n                                    type={branch === 'CE' ? 'number' : 'text'}\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    label={\r\n                                        branch === 'CE' ? 'College-ID' : 'Name'\r\n                                    }\r\n                                    helperText={\r\n                                        branch === 'CE'\r\n                                            ? 'Please enter your College-ID'\r\n                                            : 'Please enter your full name'\r\n                                    }\r\n                                    onInput={handleNaam}\r\n                                />\r\n                            )}\r\n\r\n                            <center>\r\n                                <Button\r\n                                    className={classes.submit}\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    id=\"smb\"\r\n                                    disabled={load}\r\n                                    startIcon={<DoubleArrowIcon />}\r\n                                >\r\n                                    {load ? 'loading...' : 'Submit'}\r\n                                </Button>\r\n                            </center>\r\n                        </form>\r\n                    </Container>\r\n                </>\r\n            ) : (\r\n                <Output name={name} data={res} setShowOut={setShowOut} />\r\n            )}\r\n        </>\r\n    )\r\n}\r\nexport default Home\r\n","import Home from './components/home'\nimport ParticlesBg from 'particles-bg'\n\nconst App = () => {\n    return (\n        <>\n            <Home />\n            <ParticlesBg type=\"cobweb\" num=\"30\" color=\"#a6a4ad\" bg={true} />\n        </>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}