{"version":3,"sources":["components/reader/index.js","components/home/index.js","App.js","reportWebVitals.js","index.js"],"names":["reader","name","branch","a","excelfiles","final_res","Promise","all","map","v","i","fetch","then","response","arrayBuffer","buffer","found","data","Uint8Array","ws","XLSX","read","type","Sheets","range","utils","decode_range","R","e","r","C","cell_address","c","readable","encode_cell","w","toLowerCase","s","tmp_ca","tmp_res","max_address","max","catch","err","console","error","Home","React","useState","res","setRes","submit","preventDefault","target","value","out","onSubmit","placeholder","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SA6DeA,EA3DH,uCAAG,WAAOC,EAAMC,GAAb,iBAAAC,EAAA,6DACPC,EAAa,CACb,iCACA,qCACA,0CACA,0CAEAC,EAAY,GAPL,SAQLC,QAAQC,IACVH,EAAWI,KAAI,SAACC,EAAGC,GAAJ,OACXC,MAAMF,GACDG,MAAK,SAACC,GAAD,OAAcA,EAASC,iBAC5BF,MAAK,SAACG,GAMH,IALA,IAGIC,EAHAC,EAAO,IAAIC,WAAWH,GAEpBI,EADKC,IAAKC,KAAKJ,EAAM,CAAEK,KAAM,UACrBC,OAAOrB,GAEjBsB,EAAQJ,IAAKK,MAAMC,aAAaP,EAAG,SAC9BQ,EAAI,EAAGA,GAAKH,EAAMI,EAAEC,EAAGF,IAC5B,IAAK,IAAIG,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAAC,IAAD,EACrBC,EAAe,CAAEC,EAAGF,EAAGD,EAAGF,GAC1BM,EACAd,EAAGC,IAAKK,MAAMS,YAAYH,KACvB,OAAGE,QAAH,IAAGA,GAAH,UAAGA,EAAUE,SAAb,aAAG,EAAaC,iBACXnC,IAERe,EAAQe,EAAaF,GAIjC,IAAK,IAAIC,EAAIN,EAAMa,EAAEL,EAAGF,GAAKN,EAAMI,EAAEI,EAAGF,IAAK,CAAC,IAAD,EACrCQ,EAAS,CAAEN,EAAGF,EAAGD,EAAG,GACpBU,EAAUpB,EAAGC,IAAKK,MAAMS,YAAYI,IAExC,GAAa,YADL,OAAGC,QAAH,IAAGA,GAAH,UAAGA,EAASJ,SAAZ,aAAG,EAAYC,eACA,CACnB,IAAII,EAAc,CAAER,EAAGF,EAAI,EAAGD,EAAG,GAC7BY,EAAMtB,EAAGC,IAAKK,MAAMS,YAAYM,IAEpCnC,EAAS,sBACFA,GADE,WAGDc,EACIC,IAAKK,MAAMS,YAAY,CACnBF,EAAGF,EAAI,EACPD,EAAGb,KAETP,EARD,cASCgC,EAAIhC,UAOzBiC,OAAM,SAACC,GAAD,OAASC,QAAQC,MAAMF,UAtD/B,gCAyDJtC,GAzDI,2CAAH,wD,OC0BGyC,EAzBF,WACT,MAAsBC,IAAMC,SAAS,IAArC,mBAAOC,EAAP,KAAYC,EAAZ,KAEMC,EAAM,uCAAG,WAAOvB,GAAP,mBAAAzB,EAAA,6DACXyB,EAAEwB,iBACEnD,EAAO2B,EAAEyB,OAAOpD,KAAKqD,MAAMlB,cAC3BlC,EAAS0B,EAAEyB,OAAOnD,OAAOoD,MAHlB,SAKKtD,EAAOC,EAAMC,GALlB,OAKPqD,EALO,OAMXL,EAAOK,GANI,2CAAH,sDASZ,OACI,gCACI,uBAAMC,SAAUL,EAAhB,UACI,uBAAO7B,KAAK,OAAOmC,YAAY,OAAOxD,KAAK,SAC3C,uBAAOqB,KAAK,OAAOmC,YAAY,SAASxD,KAAK,WAC7C,uBAAOqB,KAAK,cAEf2B,EAAIzC,KAAI,SAACC,EAAGC,GAAJ,OACL,4BAAYD,GAAJC,UCjBTgD,EAJH,WACR,OAAO,cAAC,EAAD,KCSIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eb943fe9.chunk.js","sourcesContent":["import XLSX from 'xlsx'\r\n\r\nconst reader = async (name, branch) => {\r\n    let excelfiles = [\r\n        'dat/B. TECH. I SEM DEC 18.xlsx',\r\n        'dat/B. TECH. II SEM JUNE 2019.xlsx',\r\n        'dat/B. TECH. III SEM DECEMBER 2019.xlsx',\r\n        'dat/B. TECH. IV SEM DECEMBER 2020.xlsx',\r\n    ]\r\n    let final_res = []\r\n    await Promise.all(\r\n        excelfiles.map((v, i) =>\r\n            fetch(v)\r\n                .then((response) => response.arrayBuffer())\r\n                .then((buffer) => {\r\n                    let data = new Uint8Array(buffer)\r\n                    const wb = XLSX.read(data, { type: 'array' })\r\n                    const ws = wb.Sheets[branch]\r\n                    let found\r\n                    let range = XLSX.utils.decode_range(ws['!ref'])\r\n                    for (let R = 7; R <= range.e.r; R++) {\r\n                        for (let C = 3; C <= 4; C++) {\r\n                            let cell_address = { c: C, r: R }\r\n                            let readable =\r\n                                ws[XLSX.utils.encode_cell(cell_address)]\r\n                            let tmp = readable?.w?.toLowerCase()\r\n                            if (tmp === name) {\r\n                                //console.log(readable, cell_address)\r\n                                found = cell_address.r\r\n                            }\r\n                        }\r\n                    }\r\n                    for (let C = range.s.c; C <= range.e.c; C++) {\r\n                        let tmp_ca = { c: C, r: 3 }\r\n                        let tmp_res = ws[XLSX.utils.encode_cell(tmp_ca)]\r\n                        let yeah = tmp_res?.w?.toLowerCase()\r\n                        if (yeah === 'result') {\r\n                            let max_address = { c: C - 1, r: 5 }\r\n                            let max = ws[XLSX.utils.encode_cell(max_address)]\r\n                            //console.log(max)\r\n                            final_res = [\r\n                                ...final_res,\r\n                                `${\r\n                                    ws[\r\n                                        XLSX.utils.encode_cell({\r\n                                            c: C - 1,\r\n                                            r: found,\r\n                                        })\r\n                                    ].v\r\n                                } / ${max.v}`,\r\n                            ]\r\n                        }\r\n                    }\r\n                    //const res = XLSX.utils.sheet_to_json(ws, { header: 1 })\r\n                    //setDat(res)\r\n                })\r\n                .catch((err) => console.error(err)),\r\n        ),\r\n    )\r\n    return final_res\r\n}\r\nexport default reader\r\n","import React from 'react'\r\nimport reader from '../reader'\r\n\r\nconst Home = () => {\r\n    const [res, setRes] = React.useState([])\r\n\r\n    const submit = async (e) => {\r\n        e.preventDefault()\r\n        let name = e.target.name.value.toLowerCase()\r\n        let branch = e.target.branch.value\r\n\r\n        let out = await reader(name, branch)\r\n        setRes(out)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={submit}>\r\n                <input type=\"text\" placeholder=\"name\" name=\"name\" />\r\n                <input type=\"text\" placeholder=\"branch\" name=\"branch\" />\r\n                <input type=\"submit\" />\r\n            </form>\r\n            {res.map((v, i) => (\r\n                <p key={i}>{v}</p>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default Home\r\n","import Home from './components/home'\n\nconst App = () => {\n    return <Home />\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}